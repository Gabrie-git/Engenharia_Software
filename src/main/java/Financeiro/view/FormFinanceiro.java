package Financeiro.view;

import Atendimento.Model.Cliente;
import Financeiro.Controller.GerenciaConta;
import Financeiro.Controller.GerenciaProduto;
import Financeiro.Controller.ItemTableModel;
import Financeiro.DAO.ItemDAO;
import Financeiro.Model.Conta;
import Financeiro.Model.Item;
import Financeiro.Model.Produto;
import Financeiro.Model.Servico;
import java.text.NumberFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import javax.swing.JOptionPane;

/**
 *
 * @author edwar
 */
enum BOTAO{
    SALVAR,
    CANCELAR,
    ALTERAR,
    REMOVER,
    NENHUM
};
    
public class FormFinanceiro extends javax.swing.JDialog {

    private BOTAO botaoPressionado;
    private final GerenciaConta gp;
    private final GerenciaProduto g;
    List<Item> itens = new ArrayList<>();
    List<Item> itensg = new ArrayList<>();
    List<Item> itensb = new ArrayList<>();
    List<Cliente> listaC = new ArrayList<>();
    ItemDAO itemDAO;
    int modo;
    private boolean isAdjustingSpinner = false;
    int id;
    
    /**
     * Creates new form FormDialogo
     * @param parent
     * @param modal
     * @param cont
     */
    public FormFinanceiro(java.awt.Frame parent, boolean modal, List<Conta> cont, int modo, int id, List<Cliente> clientes, List<Item> item, ItemDAO itemDAO) {
        super(parent, modal);
        initComponents();
        this.modo = modo;
        this.id = id;
        this.itemDAO = itemDAO;
        gp = new GerenciaConta();
        g = new GerenciaProduto();
        botaoPressionado = BOTAO.NENHUM;

        sQuantidade.setValue(1);
        btnSalvar.setEnabled(false);
        tfData.setEnabled(false);
        tfPreco.setEnabled(false);
        btnExcluir.setEnabled(false);
        
        if(clientes != null){
            listaC = clientes;
        }
        
        itensg = itemDAO.getAllItens();
        itensb = itemDAO.getAllItens();
        
        if(this.modo == 1){
            Conta aux = gp.buscarContaPorId(this.id);
            itens = aux.getItens();
            cbClientes.removeAll();
            cbClientes.addItem(aux.getCliente());
            tfPreco.setText(calcularPreco());
            if (itens.size() == 1 && itens.get(0) instanceof Servico) {
                btnExcluir.setEnabled(false);
            }else{
                btnExcluir.setEnabled(true);
            }
            cbClientes.setEnabled(false);
        } 
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        lblNome = new javax.swing.JLabel();
        lblEndereco = new javax.swing.JLabel();
        tfData = new javax.swing.JTextField();
        btnCancelar = new javax.swing.JButton();
        btnSalvar = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        btnExcluir = new javax.swing.JButton();
        btnAdicionar = new javax.swing.JButton();
        tfPreco = new javax.swing.JTextField();
        lblEndereco3 = new javax.swing.JLabel();
        cbClientes = new javax.swing.JComboBox();
        lblNome1 = new javax.swing.JLabel();
        cbItens = new javax.swing.JComboBox();
        sQuantidade = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cadastro de pessoas");

        lblNome.setDisplayedMnemonic('n');
        lblNome.setText("Cliente");

        lblEndereco.setDisplayedMnemonic('d');
        lblEndereco.setLabelFor(tfData);
        lblEndereco.setText("Data");

        tfData.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfData.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                tfDataAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        btnCancelar.setMnemonic('k');
        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnSalvar.setMnemonic('S');
        btnSalvar.setText("Salvar");
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Descrição", "Preço", "Quantidade"
            }
        ));
        jTable2.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jTable2AncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jScrollPane3.setViewportView(jTable2);

        btnExcluir.setText("Remover");
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        btnAdicionar.setText("Adicionar");
        btnAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdicionarActionPerformed(evt);
            }
        });

        tfPreco.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tfPreco.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                tfPrecoAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        lblEndereco3.setDisplayedMnemonic('d');
        lblEndereco3.setLabelFor(tfData);
        lblEndereco3.setText("Preço");

        cbClientes.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbClientesItemStateChanged(evt);
            }
        });
        cbClientes.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                cbClientesAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        lblNome1.setDisplayedMnemonic('n');
        lblNome1.setText("Item");

        cbItens.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbItensItemStateChanged(evt);
            }
        });
        cbItens.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                cbItensAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        sQuantidade.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sQuantidadeStateChanged(evt);
            }
        });

        jLabel4.setText("Quantidade:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(369, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(tfData, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblEndereco, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15))
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblNome)
                    .addComponent(cbClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 495, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAdicionar, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCancelar)))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(lblEndereco3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(tfPreco, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(317, 317, 317)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblNome1)
                            .addComponent(cbItens, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(sQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblNome)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbClientes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblEndereco)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(lblNome1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbItens, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(btnAdicionar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnExcluir)
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfPreco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEndereco3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelar)
                    .addComponent(btnSalvar))
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        int response = JOptionPane.showConfirmDialog(
                this,
                "Deseja sair sem salvar?",
                "Sair sem salvar?",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE
        );

        // Ação baseada na resposta do usuário
        if (response == JOptionPane.YES_OPTION) {
            for(Item i : itensb){
                itemDAO.atualizarItem(i);
            }
            this.dispose();
        } else if (response == JOptionPane.NO_OPTION) {
            // Usuário clicou em "Não"
        }
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        if (modo == 0) {
            Conta conta = retornaConta();
            gp.addConta(conta);
            System.out.println(gp.getAllContas());
        }
        if (modo == 1) {
            Conta conta = retornaConta();
            gp.updateConta(id, conta);
            this.dispose();
        }
        System.out.println(gp.getAllContas());
        this.dispose(); 
    }//GEN-LAST:event_btnSalvarActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        if (jTable2.getSelectedRow() != -1) {
            int linhaSelecionada = jTable2.getSelectedRow();
            int aux = (int) jTable2.getValueAt(linhaSelecionada, 0);
            int modo2 = 0;
            
            for(Item aux2 : itens){
                if(aux2 instanceof Servico){
                    modo2++;
                }
            }
                
            if (modo2 == 1) {
                if (aux != 0) {
                    itens.remove(aux);
                    jTable2.setModel(new ItemTableModel(itens));
                    tfPreco.setText(calcularPreco());
                    verificarCampos();
                    preencherComboBox();
                    if (itens.size()== 1) {
                        btnExcluir.setEnabled(false);
                    }
                }
            } else {
                Produto i = (Produto) itens.get(aux); // Pega o produto correspondente na lista de itens
                Produto produtoBanco = g.buscarProdutoPorId(i.getId()); // Busca o produto no banco pelo ID
                int quantidadeAtualizada = i.getQuantidade() + produtoBanco.getQuantidade();
                produtoBanco.setQuantidade(quantidadeAtualizada);
                itemDAO.atualizarItem(produtoBanco);
                itens.remove(aux);
                jTable2.setModel(new ItemTableModel(itens));
                tfPreco.setText(calcularPreco());
                verificarCampos();
                preencherComboBox();

                if (itens.isEmpty()) {
                    btnExcluir.setEnabled(false);
                }
            }
        }     
    }//GEN-LAST:event_btnExcluirActionPerformed

    private void btnAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarActionPerformed
        try {
            // Verificar se há algum ActionListener no ComboBox antes de removê-lo
            if (cbItens.getActionListeners().length > 0) {
                cbItens.removeActionListener(cbItens.getActionListeners()[0]);
            }

            if (cbItens.getSelectedItem() != null) {
                Produto produtoSelecionado = (Produto) cbItens.getSelectedItem();
                int idProduto = produtoSelecionado.getId();
                int quantidadeSelecionada = (int) sQuantidade.getValue();

                // Verificar se o produto já está na lista 'itens'
                boolean produtoExiste = false;

                for (Item i : itens) {
                    if (i instanceof Produto) {
                        if (i.getId() == idProduto) {
                            Produto p = (Produto) i;
                            int novaQuantidade = p.getQuantidade() + quantidadeSelecionada;
                            p.setQuantidade(novaQuantidade);
                            produtoExiste = true;
                            break;
                        }
                    }
                }

                if (!produtoExiste) {
                    Produto novoProduto = new Produto(produtoSelecionado.getId(),
                            produtoSelecionado.getDescricao(),
                            produtoSelecionado.getPreco(),
                            produtoSelecionado.getValidade(),
                            produtoSelecionado.getMarca(),
                            produtoSelecionado.getModelo(),
                            quantidadeSelecionada);
                    itens.add(novoProduto);
                }

                // Atualizar a quantidade total no banco de dados
                int quantidadeAtualizada = produtoSelecionado.getQuantidade() - quantidadeSelecionada;
                produtoSelecionado.setQuantidade(quantidadeAtualizada);
                itemDAO.atualizarItem(produtoSelecionado);

                // Atualizar a exibição do preço total
                tfPreco.setText(calcularPreco());

                // Verificar se deve habilitar o botão 'Excluir'
                verificarCampos();
                jTable2.setModel(new ItemTableModel(itens));
                sQuantidade.setValue(1);
                preencherComboBox(); // Aqui a alteração do ComboBox pode disparar eventos

                if (!itens.isEmpty()) {
                    btnExcluir.setEnabled(true);
                }
            }
        } finally {
            // Certifique-se de adicionar novamente o ActionListener no ComboBox
            if (cbItens.getActionListeners().length > 0) {
                cbItens.addActionListener(cbItens.getActionListeners()[0]);
            }
        }
    }//GEN-LAST:event_btnAdicionarActionPerformed

    private void cbClientesAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_cbClientesAncestorAdded
        if (modo == 0) {
            cbClientes.removeAll();

            if (!listaC.isEmpty()) {
                for (Cliente cf : listaC) {
                    cbClientes.addItem(cf);
                }
            }
        }
    }//GEN-LAST:event_cbClientesAncestorAdded

    private void tfDataAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_tfDataAncestorAdded
        
        LocalDate hj = LocalDate.now();
        DateTimeFormatter formato = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        String dataFormatada = hj.format(formato);
        tfData.setText(dataFormatada);
        
    }//GEN-LAST:event_tfDataAncestorAdded

    private void tfPrecoAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_tfPrecoAncestorAdded
      tfPreco.setText(calcularPreco());
    }//GEN-LAST:event_tfPrecoAncestorAdded

    private void cbItensAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_cbItensAncestorAdded

        preencherComboBox();
   
    }//GEN-LAST:event_cbItensAncestorAdded

    private void jTable2AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jTable2AncestorAdded
      if(!itens.isEmpty()){
        jTable2.setModel(new ItemTableModel(itens));  
      }  
    }//GEN-LAST:event_jTable2AncestorAdded

    private void cbClientesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbClientesItemStateChanged
        verificarCampos();
    }//GEN-LAST:event_cbClientesItemStateChanged

    private void sQuantidadeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sQuantidadeStateChanged
        
        if (isAdjustingSpinner) {
            return; // Se o valor estiver sendo ajustado programaticamente, ignore o evento
        }

        try {
            isAdjustingSpinner = true;
            int aux = (int) sQuantidade.getValue();
            if (aux < 1) {
                sQuantidade.setValue(1);
            }
            if (cbItens.getSelectedItem() != null) {
                Produto i;
                i = (Produto) cbItens.getSelectedItem();
                if (aux > i.getQuantidade()) {
                    sQuantidade.setValue(aux - 1);
                }
            }
        } finally {
            isAdjustingSpinner = false;
        }
    }//GEN-LAST:event_sQuantidadeStateChanged

    private void cbItensItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbItensItemStateChanged
        sQuantidade.setValue(1);
    }//GEN-LAST:event_cbItensItemStateChanged
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormFinanceiro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormFinanceiro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormFinanceiro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormFinanceiro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ArrayList<Conta> conta = new ArrayList<>();
                ArrayList<Item> item = new ArrayList<>();
                ArrayList<Cliente> cliente = new ArrayList<>();
                ItemDAO i = new ItemDAO();
                FormFinanceiro dialog = new FormFinanceiro(new javax.swing.JFrame(), 
                        true, conta, 0, 0, cliente, item, i);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdicionar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JComboBox cbClientes;
    private javax.swing.JComboBox cbItens;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JLabel lblEndereco;
    private javax.swing.JLabel lblEndereco3;
    private javax.swing.JLabel lblNome;
    private javax.swing.JLabel lblNome1;
    public javax.swing.JSpinner sQuantidade;
    private javax.swing.JTextField tfData;
    private javax.swing.JTextField tfPreco;
    // End of variables declaration//GEN-END:variables

    private String calcularPreco() {
        double total = 0;
        for (Item item : itens) {
            if(item instanceof Produto){
                total += (item.getPreco() * ((Produto) item).getQuantidade());
            }else{
               total += item.getPreco(); 
            }       
        }
        NumberFormat formatador = NumberFormat.getCurrencyInstance(new Locale("pt", "BR"));
        String valor = formatador.format(total);
        return valor;
    }
    
    private Conta retornaConta() {
        
        int id1 = 0;
        Cliente cliente = (Cliente) cbClientes.getSelectedItem();
        LocalDate hj = LocalDate.now();
        String valor = calcularPreco();
        valor = valor.replaceAll("[^0-9,]", ""); // Fica apenas com os números e a vírgula
        valor = valor.replace(",", ".");
        double total = Double.parseDouble(valor);
        String status = "Pendente";
        Conta conta = new Conta(id1, itens, cliente, hj, total, status);
        return conta;
    }
    
     private void verificarCampos() {
        // Verifica se todos os campos estão preenchidos
        boolean camposPreenchidos = !itens.isEmpty()
                && cbClientes.getSelectedItem() != null;

        // Habilita o botão "Salvar" somente quando todas as condições são atendidas
        btnSalvar.setEnabled(camposPreenchidos);
    }

    private void preencherComboBox() {
        itensg = itemDAO.getAllItens();
        cbItens.removeAllItems(); // Limpar o ComboBox antes de preencher

        if (!itensg.isEmpty()) {
            // Data atual para comparação
            LocalDate dataAtual = LocalDate.now();

            for (Item item : itensg) {
                if (item instanceof Produto) {
                    Produto produto = (Produto) item;

                    // Verificar se a quantidade é maior que 0 e se a validade não expirou
                    if (produto.getQuantidade() > 0 && produto.getValidade().isAfter(dataAtual)) {
                        cbItens.addItem(produto);
                    }
                }
            }
        }
    }
}

