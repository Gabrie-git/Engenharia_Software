
package Servico.view;

import Atendimento.Model.Animal;
import Atendimento.Model.Cliente;
import Financeiro.Model.Item;
import Financeiro.Model.Servico;
import Servico.Controller.GerenciaAgendamento;
import Servico.Model.Agendamento;
import Servico.Model.Profissional;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author augus
 */
public class FormAgendamento extends javax.swing.JDialog {
  
    private final GerenciaAgendamento ga;
    int modo;
    int id;
    String statusAlterar;
    List<Cliente> listaC = new ArrayList<>();
    List<Item> listaS = new ArrayList<>();
    private Map<Profissional, Map<LocalDate, Set<LocalTime>>> compromissos = new HashMap<>();
    private static final DateTimeFormatter FORMATO_HORA = DateTimeFormatter.ofPattern("HH:mm");

    /**
     * Creates new form FormAgendamento
     * @param parent
     * @param modal
     * @param agen
     * @param modo
     * @param id
     * @param c
     * @param s
     */
    public FormAgendamento(java.awt.Frame parent, boolean modal, List<Agendamento> agen, int modo, int id, List<Cliente> c, List<Item> s) {
        super(parent, modal);
        initComponents();
        this.modo = modo;
        this.id = id;
        ga = new GerenciaAgendamento();
        atualizaCbProfissional();
        preencherCompromissos();
        
        JTextField dateTextField = ((JTextField) dcData.getDateEditor().getUiComponent());
        dateTextField.setEnabled(false);
        dcData.setDate(new Date());
        dcData.setMinSelectableDate(java.sql.Date.valueOf(LocalDate.now())); // Impede seleção de datas passadas
        dcData.addPropertyChangeListener("date", e -> atualizarHorariosDisponiveis());
        dcData.addPropertyChangeListener("date",e -> verificarCampos());
        atualizarHorariosDisponiveis();
        btnSalvar.setEnabled(false);
        
        if(c != null){
            listaC = c;
        }
        if(s != null){
            listaS = s;
        }
        
        if(this.modo == 1){
           Agendamento aux = ga.buscarAgendamento(this.id);
           cbClientes.removeAll();
           cbClientes.addItem(aux.getCliente());
           cbClientes.setEnabled(false);
           cbServico.removeAll();
           cbServico.addItem(aux.getServico());
           cbServico.setEnabled(false);
           cbAnimal.removeAll();
           cbAnimal.addItem(aux.getAnimal());
           cbAnimal.setSelectedItem(aux.getAnimal());
           cbAnimal.setEnabled(false);
           cbProfissional.setSelectedItem(aux.getProfissional());
           cbHoras.setSelectedItem(aux.getHora());
           LocalDate data = aux.getData();
           dcData.setDate(Date.from(data.atStartOfDay(ZoneId.systemDefault()).toInstant()));
           statusAlterar = aux.getStatus();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblNome = new javax.swing.JLabel();
        cbClientes = new javax.swing.JComboBox();
        lblNome1 = new javax.swing.JLabel();
        cbAnimal = new javax.swing.JComboBox();
        lblNome2 = new javax.swing.JLabel();
        cbServico = new javax.swing.JComboBox();
        lblNome3 = new javax.swing.JLabel();
        cbProfissional = new javax.swing.JComboBox();
        lblEndereco = new javax.swing.JLabel();
        dcData = new com.toedter.calendar.JDateChooser();
        lblEndereco1 = new javax.swing.JLabel();
        cbHoras = new javax.swing.JComboBox<>();
        btnSalvar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        lblNome.setDisplayedMnemonic('n');
        lblNome.setText("Cliente");

        cbClientes.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbClientesItemStateChanged(evt);
            }
        });
        cbClientes.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                cbClientesAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        lblNome1.setDisplayedMnemonic('n');
        lblNome1.setText("Animal");

        cbAnimal.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbAnimalItemStateChanged(evt);
            }
        });
        cbAnimal.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                cbAnimalAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        lblNome2.setDisplayedMnemonic('n');
        lblNome2.setText("Serviço");

        cbServico.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbServicoItemStateChanged(evt);
            }
        });
        cbServico.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                cbServicoAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        lblNome3.setDisplayedMnemonic('n');
        lblNome3.setText("Profissional");

        cbProfissional.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbProfissionalItemStateChanged(evt);
            }
        });
        cbProfissional.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                cbProfissionalAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        lblEndereco.setDisplayedMnemonic('d');
        lblEndereco.setText("Data");

        lblEndereco1.setDisplayedMnemonic('d');
        lblEndereco1.setText("Horário");

        cbHoras.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbHorasItemStateChanged(evt);
            }
        });
        cbHoras.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                cbHorasAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        btnSalvar.setMnemonic('S');
        btnSalvar.setText("Salvar");
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        btnCancelar.setMnemonic('k');
        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblNome)
                    .addComponent(lblNome1)
                    .addComponent(lblNome2)
                    .addComponent(lblNome3)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dcData, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblEndereco1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbHoras, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(cbServico, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cbClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbAnimal, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(cbProfissional, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancelar)
                        .addGap(7, 7, 7)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblNome)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbClientes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblNome1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbAnimal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblNome2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbServico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblNome3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbProfissional, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblEndereco)
                    .addComponent(lblEndereco1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dcData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbHoras, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelar)
                    .addComponent(btnSalvar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbClientesAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_cbClientesAncestorAdded
        if (modo == 0) {
            cbClientes.removeAll();
            if (!listaC.isEmpty()) {
                for (Cliente cf : listaC) {
                    cbClientes.addItem(cf);
                }
            }
        }          
    }//GEN-LAST:event_cbClientesAncestorAdded

    private void cbAnimalAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_cbAnimalAncestorAdded
        if (modo == 0) {
            atualizaCbAnimal();
        }
    }//GEN-LAST:event_cbAnimalAncestorAdded

    private void cbServicoAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_cbServicoAncestorAdded
        if (modo == 0) {
            cbServico.removeAll();

            if (!listaS.isEmpty()) {
                for (Item cf : listaS) {
                    if (cf instanceof Servico) {
                        cbServico.addItem(cf);
                    }
                }
            }
        }      
    }//GEN-LAST:event_cbServicoAncestorAdded

    private void cbProfissionalAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_cbProfissionalAncestorAdded
        atualizaCbProfissional();
    }//GEN-LAST:event_cbProfissionalAncestorAdded

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        if (modo == 0) {
            Agendamento agendamento = retornaAgendamento();
            ga.cadastrarAgendamento(agendamento);
            System.out.println(ga.getAllAgendamentos());
        }
        if (modo == 1) {
            Agendamento agendamento = retornaAgendamento();
            ga.alterarAgendamento(id, agendamento);
        }
        System.out.println(ga.getAllAgendamentos());
        this.dispose();
    }//GEN-LAST:event_btnSalvarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        int response = JOptionPane.showConfirmDialog(
            this,
            "Deseja sair sem salvar?",
            "Sair sem salvar?",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.WARNING_MESSAGE
        );

        // Ação baseada na resposta do usuário
        if (response == JOptionPane.YES_OPTION) {
            this.dispose();
        } else if (response == JOptionPane.NO_OPTION) {
            // Usuário clicou em "Não"
        }
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void cbHorasAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_cbHorasAncestorAdded
        atualizarHorariosDisponiveis();
    }//GEN-LAST:event_cbHorasAncestorAdded

    private void cbClientesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbClientesItemStateChanged
        cbAnimal.removeAll();
        atualizaCbAnimal();
        verificarCampos();
    }//GEN-LAST:event_cbClientesItemStateChanged

    private void cbServicoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbServicoItemStateChanged
       cbProfissional.removeAll();
       atualizaCbProfissional();
       verificarCampos();
    }//GEN-LAST:event_cbServicoItemStateChanged

    private void cbAnimalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbAnimalItemStateChanged
        verificarCampos();
    }//GEN-LAST:event_cbAnimalItemStateChanged

    private void cbProfissionalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbProfissionalItemStateChanged
        verificarCampos();
        atualizarHorariosDisponiveis();
    }//GEN-LAST:event_cbProfissionalItemStateChanged

    private void cbHorasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbHorasItemStateChanged
        verificarCampos();
    }//GEN-LAST:event_cbHorasItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormAgendamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormAgendamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormAgendamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormAgendamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(() -> {
            List<Agendamento> agen = new ArrayList<>();
            List<Cliente> c = new ArrayList<>();
            List<Item> s = new ArrayList<>();
            FormAgendamento dialog = new FormAgendamento(new javax.swing.JFrame(), true, agen, 0, 0, c, s);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JComboBox cbAnimal;
    private javax.swing.JComboBox cbClientes;
    private javax.swing.JComboBox<String> cbHoras;
    private javax.swing.JComboBox cbProfissional;
    private javax.swing.JComboBox cbServico;
    private com.toedter.calendar.JDateChooser dcData;
    private javax.swing.JLabel lblEndereco;
    private javax.swing.JLabel lblEndereco1;
    private javax.swing.JLabel lblNome;
    private javax.swing.JLabel lblNome1;
    private javax.swing.JLabel lblNome2;
    private javax.swing.JLabel lblNome3;
    // End of variables declaration//GEN-END:variables
   private String[] gerarHorarios() {
        // Horários de 08:00 às 11:00 e de 13:00 às 18:00, com intervalos de meia hora
        List<String> horarios = new ArrayList<>();
        
        // Gera horários de 08:00 às 11:00
        IntStream.range(0, 6).forEach(i -> {
            LocalTime hora = LocalTime.of(8 + (i / 2), (i % 2) * 30);
            horarios.add(hora.format(FORMATO_HORA));
        });
        
        // Gera horários de 13:00 às 18:00
        IntStream.range(0, 11).forEach(i -> {
            LocalTime hora = LocalTime.of(13 + (i / 2), (i % 2) * 30);
            horarios.add(hora.format(FORMATO_HORA));
        });
        
        return horarios.toArray(String[]::new);
    }

    private void atualizarHorariosDisponiveis() {
        verificarCampos();

        // Obtenha o profissional selecionado
        Profissional profissionalSelecionado = (Profissional) cbProfissional.getSelectedItem();

        if (profissionalSelecionado == null) {
            System.out.println("Nenhum profissional foi selecionado.");
            return; // Sai da função se não houver profissional selecionado
        }

        // Continue apenas se compromissos e profissional foram definidos
        if (compromissos != null) {
            Date ds = dcData.getDate();
            LocalDate dataSelecionada = ds.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();

            System.out.println("Profissional selecionado: " + profissionalSelecionado);
            System.out.println("Data selecionada: " + dataSelecionada);

            // Obtém os horários ocupados para o profissional e data selecionados
            Map<LocalDate, Set<LocalTime>> horariosPorData = compromissos.get(profissionalSelecionado);
            Set<LocalTime> horariosOcupados = (horariosPorData != null)
                    ? horariosPorData.getOrDefault(dataSelecionada, Collections.emptySet())
                    : Collections.emptySet();

            System.out.println("Horários ocupados para o profissional na data selecionada: " + horariosOcupados);

            // Gera a lista de horários disponíveis
            String[] horariosDisponiveis = gerarHorarios();

            // Filtra os horários disponíveis com base nos horários ocupados e nos horários anteriores ao atual
            LocalTime horarioAtual = LocalTime.now();

            List<String> horariosFiltrados = Arrays.stream(horariosDisponiveis)
                    .filter(h -> {
                        LocalTime horario = LocalTime.parse(h, FORMATO_HORA);
                        // Verifica se o horário não está ocupado ou se o agendamento foi cancelado
                        boolean horarioDisponivel = !horariosOcupados.contains(horario) || isHorarioCancelado(horario, dataSelecionada, profissionalSelecionado);

                        // Se a data selecionada for hoje, também verifica se o horário é posterior ao horário atual
                        if (dataSelecionada.equals(LocalDate.now())) {
                            return horarioDisponivel && horario.isAfter(horarioAtual);
                        } else {
                            return horarioDisponivel;
                        }
                    })
                    .collect(Collectors.toList());

            System.out.println("Horários filtrados: " + horariosFiltrados);

            // Atualiza o ComboBox com os horários disponíveis
            cbHoras.removeAllItems();
            for (String horario : horariosFiltrados) {
                cbHoras.addItem(horario);
            }
        } else {
            System.out.println("Nenhum compromisso encontrado.");
            String[] horariosFiltrados = gerarHorarios();
            cbHoras.removeAllItems();
            for (String horario : horariosFiltrados) {
                cbHoras.addItem(horario);
            }
        }
    }

    private boolean isHorarioCancelado(LocalTime horario, LocalDate dataSelecionada, Profissional profissionalSelecionado) {
        List<Agendamento> agendas = ga.getAllAgendamentos();
        boolean horarioCancelado = false;

        for (Agendamento agendamento : agendas) {
            // Verifica se o agendamento pertence ao mesmo profissional, data e horário
            if (agendamento.getProfissional().equals(profissionalSelecionado)
                    && agendamento.getData().equals(dataSelecionada)
                    && agendamento.getHora().equals(horario)) {

                // Se houver um agendamento "Ativo" ou "Realizado", o horário não está cancelado
                if ("Agendado".equalsIgnoreCase(agendamento.getStatus()) || "Realizada".equalsIgnoreCase(agendamento.getStatus())) {
                    return false;
                }

                // Se o status for "Cancelado", marque como horário cancelado
                if ("Cancelado".equalsIgnoreCase(agendamento.getStatus())) {
                    horarioCancelado = true;
                }
            }
        }

        // Retorna verdadeiro apenas se todos os agendamentos para o horário forem cancelados
        return horarioCancelado;
    }

    private void preencherCompromissos() {
        // Exemplo de como compromissos pode ser preenchido
        List<Agendamento> listaAgendamentos = ga.getAllAgendamentos();
        for (Agendamento agendamento : listaAgendamentos) {
            Profissional profissional = agendamento.getProfissional();
            LocalDate data = agendamento.getData();
            LocalTime hora = agendamento.getHora();

            // Verifica se o mapa já contém o profissional
            Map<LocalDate, Set<LocalTime>> horariosPorData = compromissos.get(profissional);
            if (horariosPorData == null) {
                horariosPorData = new HashMap<>();
                compromissos.put(profissional, horariosPorData);
            }

            // Verifica se o mapa já contém a data
            Set<LocalTime> horariosOcupados = horariosPorData.get(data);
            if (horariosOcupados == null) {
                horariosOcupados = new HashSet<>();
                horariosPorData.put(data, horariosOcupados);
            }

            // Adiciona o horário
            horariosOcupados.add(hora);
        }
    }
    
    private void atualizaCbAnimal(){
        
        if(cbClientes.getSelectedItem() != null){
            Cliente cliente = (Cliente) cbClientes.getSelectedItem();
            if (cliente.getAnimais() != null && !cliente.getAnimais().isEmpty()) {
                cbAnimal.removeAllItems();

                for (Animal cf : cliente.getAnimais()) {
                    cbAnimal.addItem(cf);
                }
            }else{
               cbAnimal.removeAllItems(); 
            }     
        }  
    }
    
    private void atualizaCbProfissional(){
        if (cbServico.getSelectedItem() != null) {
            Servico servico = (Servico) cbServico.getSelectedItem();
            if (servico.getProfissional() != null){
              
                cbProfissional.removeAllItems();

                for (Profissional cf : servico.getProfissional()) {
                    cbProfissional.addItem(cf);
                } 
                if (!servico.getProfissional().isEmpty()) {
                    cbProfissional.setSelectedIndex(0); // Seleciona o primeiro profissional
                }
            }else{
                cbProfissional.removeAllItems();
            }   
        }       
    }

    private Agendamento retornaAgendamento(){
        int id1 = 0;
        Cliente cliente = (Cliente) cbClientes.getSelectedItem();
        Profissional profissional = (Profissional) cbProfissional.getSelectedItem();
        Animal animal = (Animal) cbAnimal.getSelectedItem();
        Servico servico = (Servico) cbServico.getSelectedItem();
        Date ds = dcData.getDate();
        LocalDate data = ds.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        String horarioSelecionado = (String) cbHoras.getSelectedItem();
        LocalTime hora = LocalTime.parse(horarioSelecionado, FORMATO_HORA);
        String status;
        if(modo == 1 ){
           status = statusAlterar; 
        }else{
            status = "Agendado";
        }
        Agendamento agendamento = new Agendamento(id,animal, cliente, servico, hora, data, profissional, status);
        return agendamento;
    }
    
    private void verificarCampos() {
        // Verifica se todos os campos estão preenchidos
        boolean camposPreenchidos = cbClientes.getSelectedItem() != null
                && cbProfissional.getSelectedItem() != null
                && cbAnimal.getSelectedItem() != null
                && cbServico.getSelectedItem() != null
                && dcData.getDate() != null
                && cbHoras.getSelectedItem() != null;

        // Habilita o botão "Salvar" somente quando todas as condições são atendidas
        btnSalvar.setEnabled(camposPreenchidos);
    }
}



